package com.fabiyjose.practica3;

import static java.lang.Integer.parseInt;
import javax.swing.*;

/**
 *
 * @author Fabián & José
 */
public class Practica3 extends javax.swing.JFrame {
    
    private int M[][];
    private int aux;
    private int mini = 0;
    private int maxi = 100;
    private int jumps = this.maxi/10;
    private boolean update = false;

    /**
     * Creates new form practica3
     */
    public Practica3() {
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        matrixArea.setEditable(false);
                
        slider.setMinimum(this.mini);
        slider.setMaximum(this.maxi);
        slider.setMajorTickSpacing((int) this.jumps);
        slider.setMinorTickSpacing((int) this.jumps/5);
        slider.setPaintTicks(true);
        slider.setPaintLabels(true);
        
        generateMatrix();
    }
    
    private void generateMatrix() {
        this.update = false;
        M = new int[10] [10];
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                M[i][j] = (int) Math.floor(Math.random() * (this.maxi - this.mini + 1) + this.mini);
            }
        }
        showMatrix();
    }
    
    private void showMatrix() {
        matrixArea.setText("");
        for (int i = 0; i < 10; i++) {
            for (int j = 0; j < 10; j++) {
                int value = M[i][j];
                if (value <= this.aux && this.update) {
                    if (j < 9) {
                       matrixArea.append("-" + "\t"); 
                    } else {
                        matrixArea.append("-");
                    }
                } else {
                    if (j < 9) {
                        matrixArea.append(String.valueOf(value) + "\t");
                    } else {
                        matrixArea.append(String.valueOf(value));
                    }
                }                
            }
            matrixArea.append("\n");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matrixPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        matrixArea = new javax.swing.JTextArea();
        configPanel = new javax.swing.JPanel();
        min = new javax.swing.JTextField();
        max = new javax.swing.JTextField();
        minLabel = new javax.swing.JLabel();
        maxLabel = new javax.swing.JLabel();
        slider = new javax.swing.JSlider();
        configLabel = new javax.swing.JLabel();
        signature = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        matrixPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Matrix", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Showcard Gothic", 0, 14))); // NOI18N

        matrixArea.setColumns(20);
        matrixArea.setRows(5);
        jScrollPane1.setViewportView(matrixArea);

        javax.swing.GroupLayout matrixPanelLayout = new javax.swing.GroupLayout(matrixPanel);
        matrixPanel.setLayout(matrixPanelLayout);
        matrixPanelLayout.setHorizontalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        matrixPanelLayout.setVerticalGroup(
            matrixPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(matrixPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addContainerGap())
        );

        configPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Configuration", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Showcard Gothic", 0, 14))); // NOI18N

        min.setText("0");
        min.setToolTipText("Minimum value is 0");
        min.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                minKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                minKeyTyped(evt);
            }
        });

        max.setText("100");
        max.setToolTipText("Maximum value is 10000");
        max.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                maxKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                maxKeyTyped(evt);
            }
        });

        minLabel.setText("Min =");

        maxLabel.setText("Max =");

        slider.setToolTipText("");
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        slider.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                sliderMouseMoved(evt);
            }
        });

        configLabel.setText("Introduce new range of integer values:");

        signature.setText("© José & Fabián");

        javax.swing.GroupLayout configPanelLayout = new javax.swing.GroupLayout(configPanel);
        configPanel.setLayout(configPanelLayout);
        configPanelLayout.setHorizontalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(minLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(min, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(maxLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(max, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(configPanelLayout.createSequentialGroup()
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(configPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(configLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(configPanelLayout.createSequentialGroup()
                        .addGap(44, 778, Short.MAX_VALUE)
                        .addComponent(signature)))
                .addContainerGap())
        );
        configPanelLayout.setVerticalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configPanelLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(configPanelLayout.createSequentialGroup()
                        .addComponent(configLabel)
                        .addGap(18, 18, 18)
                        .addGroup(configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(min, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(max, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(minLabel)
                            .addComponent(maxLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(signature)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(matrixPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(configPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(matrixPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void minKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minKeyTyped
        checkTextField(evt);
    }//GEN-LAST:event_minKeyTyped

    private void maxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxKeyTyped
        checkTextField(evt);
    }//GEN-LAST:event_maxKeyTyped
    
    private void checkTextField(java.awt.event.KeyEvent evt){
        char c = evt.getKeyChar();
        if (!Character.isDigit(c) && c != '\b' && !evt.isActionKey() && evt.getKeyChar() != java.awt.event.KeyEvent.VK_DELETE){
            getToolkit().beep();
            evt.consume();
            JOptionPane.showMessageDialog(null, "Please, introduce only non-negative numbers");
        }
    }
    
    
    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        this.aux = slider.getValue();        
        showMatrix();
        this.update = true;
    }//GEN-LAST:event_sliderStateChanged

    private void sliderMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderMouseMoved
        slider.setToolTipText(String.valueOf(slider.getValue()));
    }//GEN-LAST:event_sliderMouseMoved

    private void minKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_minKeyReleased
        if (!max.getText().equals("") && !min.getText().equals("")){
            process();
        }
    }//GEN-LAST:event_minKeyReleased

    private void maxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_maxKeyReleased
        if (!max.getText().equals("") && !min.getText().equals("")){
            process();
        }
    }//GEN-LAST:event_maxKeyReleased

    private void process(){        
        this.maxi = parseInt(max.getText());
        this.mini = parseInt(min.getText());
        if (this.mini >= this.maxi) {
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Minimum value must be lower than maximum");
            return;
        }
        if (this.maxi > 10000) {
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Values must be integers between 0 and 10000");
            return;
        }      
        generateMatrix(); 
        slider.setMinimum(this.mini);
        slider.setMaximum(this.maxi);
        
        if (this.maxi > 50){
            this.jumps = Math.round(this.maxi/10);         
            slider.setLabelTable(null);
            slider.setMajorTickSpacing(this.jumps);
            slider.setMinorTickSpacing((int) this.jumps/5);
        } else if(this.maxi > 10){
            this.jumps = Math.round(this.maxi/5);         
            slider.setLabelTable(null);
            slider.setMajorTickSpacing(this.jumps);
            slider.setMinorTickSpacing((int) this.jumps/2);
        } else {
            slider.setLabelTable(null);
            slider.setMajorTickSpacing(1);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Practica3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Practica3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Practica3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Practica3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Practica3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel configLabel;
    private javax.swing.JPanel configPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea matrixArea;
    private javax.swing.JPanel matrixPanel;
    private javax.swing.JTextField max;
    private javax.swing.JLabel maxLabel;
    private javax.swing.JTextField min;
    private javax.swing.JLabel minLabel;
    private javax.swing.JLabel signature;
    private javax.swing.JSlider slider;
    // End of variables declaration//GEN-END:variables
}
